// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId      String        @unique
  email        String        @unique
  firstname    String?       @unique
  lastname     String?       @unique
  createdAt    DateTime      @default(now())
  subscription Subscription?
  automations  Automation[]
  integration  Integration[]
}

model Subscription {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @db.Uuid
}

model Automation {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @default("New Automation")
  createdAt DateTime  @default(now())
  active    Boolean   @default(false)
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @db.Uuid
  triggers  Trigger[]
  listener  Listener?
  posts     Post[]
  dms       Dms[]
  keywords  Keyword[]
}

model Integration {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        INTEGRATION @default(INSTAGRAM)
  createdAt   DateTime    @default(now())
  User        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?     @db.Uuid
  toekn       String      @unique
  expiresAt   DateTime?
  instagramId String?     @unique
}

model Trigger {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Listener {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation?  @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?  @unique    @db.Uuid
  listener     LISTENER    @default(MESSAGE)
  prompt       String
  commentReply String?
  dmCount      Int         @default(0)
  commentCount Int         @default(0)
}

model Dms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id])
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
}

model Post {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postid       String
  caption      String?
  media        String
  mediaType    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Keyword {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  @@unique([automationId, word]) 
}


enum LISTENER {
  SMARTAI
  MESSAGE
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum SUBSCRIPTION_PLAN {
  FREE
  BASIC
  PRO
}

enum INTEGRATION {
  INSTAGRAM
  FACEBOOK
  TWITTER
  LINKEDIN
  GOOGLE
}
